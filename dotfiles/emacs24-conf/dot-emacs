;;; .emacs --- summary
;;; Commentary:
;;; Code:

(require 'cask "~/.cask/cask.el")
(cask-initialize)

;; Prefer backward-kill-word over Backspace
(global-set-key "\C-w"     'backward-kill-word)
(global-set-key "\C-x\C-k" 'kill-region)
(global-set-key "\C-c\C-k" 'kill-region)
(global-set-key "\C-cg" 'magit-status)

;; Lose the UI
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

;;
;; org-mode
;;

(add-to-list 'load-path "~/.emacs.d/el-get/org-mode/lisp")
(require 'ox-reveal)
(setq org-alphabetical-lists t)

;; Explicitly load required exporters
(require 'ox-html)
(require 'ox-latex)
(require 'ox-ascii)

(setq org-directory "~/org")
;; MobileOrg
(setq org-mobile-directory "~/mobileorg")
(setq org-mobile-inbox-for-pull "~/org/from-mobile.org")
;; Capture
(setq org-default-notes-file (concat org-directory "/org/notes.org"))
(define-key global-map "\C-cc" 'org-capture)
;; Layout: indented (setq org-startup-indented t)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
;; Clocking work time
;(setq org-log-done 'time) ;; not needed with org-todo-keywords sequence
;(setq org-clock-idle-time "10")  ;; http://orgmode.org/manual/Resolving-idle-time.html
;(setq org-clock-continuously t)  ;; http://orgmode.org/manual/Resolving-idle-time.html
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)

(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c v") 'org-show-todo-tree)

;; ! (for a timestamp)
;; @ (for a note with timestamp)
(setq org-todo-keywords
      '((sequence "TODO(t)"
		  "DEFERRED(d!)"
		  "DELEGATED(D@)"
		  "STARTED(s!)"
		  "WAITING(w@/!)"
		  "DONE(o!)"
		  "CANCELLED(c@)")))
(setq org-agenda-files (quote ("~/org/actions.org")))
(setq org-agenda-include-diary t)
(setq org-agenda-include-all-todo t)

(setq org-capture-templates
      '(
	("q" "Question" 
	 entry (file+headline "~/org/notes.org" "Questions")
	 "* TODO %?\n  %i\n  %a")
	("t" "Todo" 
	 entry (file+headline "~/org/notes.org" "Tasks")
	 "* TODO %?\n  %i\n  %a")
        ("j" "Journal" entry (file+datetree "~/org/journal.org")
	 "* %?\nEntered on %U\n  %i\n  %a")
	)
      )

;;
;; http://doc.norang.ca/org-mode.html#OrgBabel (ditaa/graphviz/plantuml)
;;
(setq org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")
(setq org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar")
; Make babel results blocks lowercase
(setq org-babel-results-keyword "results")

(defun bh/display-inline-images ()
   (condition-case nil
      (org-display-inline-images)
    (error nil)))

(org-babel-do-load-languages
 (quote org-babel-load-languages)
 (quote ((emacs-lisp . t)
         (dot . t)
         (ditaa . t)
         (R . t)
         (ruby . t)
	 (python . t)
         (gnuplot . t)
         (clojure . t)
         (sh . t)
         (ledger . t)
         (org . t)
         (plantuml . t)
	 (latex . t))))

; Do not prompt to confirm evaluation
; This may be dangerous - make sure you understand the consequences
; of setting this -- see the docstring for details
(setq org-confirm-babel-evaluate nil)

; Use fundamental mode when editing plantuml blocks with C-c '
(add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))
(add-hook 'org-babel-after-execute-hook 'bh/display-inline-images 'append)

;;http://emacswiki.org/emacs/InteractivelyDoThings 
(require 'ido)
(ido-mode t)

;; http://www.emacswiki.org/emacs/AnsiColor
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

;;package archive
(require 'package)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")
			 ("org" . "http://orgmode.org/elpa/")))
(package-initialize)

;;el-get
;;https://github.com/dimitri/el-get
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")
(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
    (let (el-get-master-branch)
      (goto-char (point-max))
      (eval-print-last-sexp))))
(el-get 'sync)

;; color-theme-solarized-dark
(load-theme 'solarized-dark t t)
(enable-theme 'solarized-dark)

;; jedi-mode
(add-hook 'python-mode-hook 'jedi:setup)
(add-hook 'python-mode-hook 'auto-complete-mode)
(setq jedi:complete-on-dot t)
(setq jedi:jedi:install-imenu t)

;; elpy setup --- using python.el for now
;;(package-initialize)
;;(elpy-enable)
;;(elpy-use-ipython)
;;(elpy-clean-modeline)
;;(setq elpy-rpc-backend "jedi")

;;enable flycheck
(add-hook 'after-init-hook #'global-flycheck-mode)

;;(require 'autopair)
(autopair-global-mode) ;; to enable in all buffers

;; twittering-mode
(setq twittering-use-master-password t)

(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "/usr/bin/conkeror")

;; ix.io
(setq ix-user "username")
(setq ix-token "password")

(provide '.emacs)
;;; .emacs ends here
